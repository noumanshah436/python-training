
Generators in Python :

There is a lot of work in building an iterator in Python. We have to implement a class with __iter__()
and __next__() method, keep track of internal states, and raise StopIteration when there are no values to
be returned.

This is both lengthy and counterintuitive. Generator comes to the rescue in such situations.

Python generators are a simple way of creating iterators. All the work we mentioned above are automatically
handled by generators in Python.

Simply speaking, a generator is a function that returns an object (iterator) which we can iterate over
(one value at a time).


Create Generators in Python
It is fairly simple to create a generator in Python. It is as easy as defining a normal function,
but with a yield statement instead of a return statement.

If a function contains at least one yield statement (it may contain other yield or return statements),
it becomes a generator function. Both yield and return will return some value from a function.

The difference is that while a return statement terminates a function entirely, yield statement pauses
the function saving all its states and later continues from there on successive calls.


What are the Generators in Python?
Generators concept is also very similar as it is used to make an iterator. The only difference comes in
the return statement. The generator does not use a return statement. Instead, it uses a yield keyword.
Yield functionality is very similar to return as it returns a value to the caller, but the difference is
that it also saves the state of the iterator. Meaning that when we use the function again, the yield will
resume it is the value from the place it left off.

Generators in Python are created just like the normal functions using the ‘def’ keyword. Generator functions
do not run by their name, and they are run when the __next__() function is called.Generator is very helpful
in projects relating to memory issue because like a simple iterator, it does not return all the values at a
time instead it produces, series of values overtime. So a generator is generally used when we want to
iterate over a series of values but do not want to store them completely in memory.



Differences between Generator function and Normal function
Here is how a generator function differs from a normal function.

Generator function contains one or more yield statements.
When called, it returns an object (iterator) but does not start execution immediately.
Methods like __iter__() and __next__() are implemented automatically. So we can iterate through the items using next().
Once the function yields, the function is paused and the control is transferred to the caller.
Local variables and their states are remembered between successive calls.
Finally, when the function terminates, StopIteration is raised automatically on further calls.
Here is an example to illustrate all of the points stated above. We have a generator function named my_gen() with several yield statements.


****************************************
https://www.programiz.com/python-programming/generator

# A simple generator function
def my_gen():
    n = 1
    print('This is printed first')
    # Generator function contains yield statements
    yield n

    n += 1
    print('This is printed second')
    yield n

    n += 1
    print('This is printed at last')
    yield n

An interactive run in the interpreter is given below. Run these in the Python shell to see the output.

>>> # It returns an object but does not start execution immediately.
>>> a = my_gen()

>>> # We can iterate through the items using next().
>>> next(a)
This is printed first
1
>>> # Once the function yields, the function is paused and the control is transferred to the caller.

>>> # Local variables and theirs states are remembered between successive calls.
>>> next(a)
This is printed second
2

>>> next(a)
This is printed at last
3

>>> # Finally, when the function terminates, StopIteration is raised automatically on further calls.
>>> next(a)
Traceback (most recent call last):
...
StopIteration
>>> next(a)
Traceback (most recent call last):
...
StopIteration

****************************************


One interesting thing to note in the above example is that the value of variable n is remembered
between each call.

Unlike normal functions, the local variables are not destroyed when the function yields.
Furthermore, the generator object can be iterated only once.

To restart the process we need to create another generator object using something like a = my_gen().

One final thing to note is that we can use generators with for loops directly.

This is because a for loop takes an iterator and iterates over it using next() function.
It automatically ends when StopIteration is raised. Check here to know how a for loop is actually
implemented in Python.
